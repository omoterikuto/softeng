Template Methodパターンを用いて重複した記述を避けようとする場合、テンプレートメソッドによって共通化する実装を増やす方法が挙げられる。
このような実装だとテンプレートクラスとサブクラスの結合度は高く、万が一テンプレートメソッドに変更の必要が出た際にすべてのサブクラスの振る舞いに影響が出てしまう。
また、図形の描画方法が増えた際も特定のサブクラスに共通する処理をテンプレートクラスに実装していくと、このクラスのコード量は肥大化し可読性の低いコードになることが考えらえれる。